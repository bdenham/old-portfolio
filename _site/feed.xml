<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-02-13T09:48:54-06:00</updated><id>http://localhost:4000/</id><title type="html">Bruce Denham</title><subtitle></subtitle><entry><title type="html">Framework Overviews</title><link href="http://localhost:4000/2018/02/12/framework-overviews-2.html" rel="alternate" type="text/html" title="Framework Overviews" /><published>2018-02-12T22:46:26-06:00</published><updated>2018-02-12T22:46:26-06:00</updated><id>http://localhost:4000/2018/02/12/framework-overviews-2</id><content type="html" xml:base="http://localhost:4000/2018/02/12/framework-overviews-2.html">&lt;p&gt;Some of the most fun and rewarding work is in helping developers understand the big picture before they dive into the code. While at Schlumberger, I created several framework overview documents for a new framework for over 100 application developers stationed at different sites around the world. Here are some samples from that effort. I was the sole tech writer on this project, responsible for creating overview guides, illustrations, presentations, training materials, and the API help, all accessible from within Visual Studio. All illustrations and writings are mine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/HorizonPurpose.png&quot; alt=&quot;HorizonPurpose&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/ToolPlugins.png&quot; alt=&quot;ToolPlugins&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/AppClasses-squashed-1.png&quot; alt=&quot;AppClasses-squashed-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/ArchitecturePart1-squashed.png&quot; alt=&quot;ArchitecturePart1-squashed&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/ArchitecturePart2-squashed.png&quot; alt=&quot;ArchitecturePart2-squashed&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Framework.png&quot; alt=&quot;Framework&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/APIPart3.png&quot; alt=&quot;APIPart3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/APIPart2-squashed-1.png&quot; alt=&quot;APIPart2-squashed-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/BaseClasses2-squashed.png&quot; alt=&quot;BaseClasses2-squashed&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/APIStruct-Usage2.png&quot; alt=&quot;APIStruct-Usage2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/HowHorizonWorksOverview3.png&quot; alt=&quot;HowHorizonWorksOverview3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Configuration_Part1-squashed.png&quot; alt=&quot;Configuration_Part1-squashed&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/3Acquisition-squashed-1.png&quot; alt=&quot;3Acquisition-squashed-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/4Computation.png&quot; alt=&quot;4Computation&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Some of the most fun and rewarding work is in helping developers understand the big picture before they dive into the code. While at Schlumberger, I created several framework overview documents for a new framework for over 100 application developers stationed at different sites around the world. Here are some samples from that effort. I was the sole tech writer on this project, responsible for creating overview guides, illustrations, presentations, training materials, and the API help, all accessible from within Visual Studio. All illustrations and writings are mine.</summary></entry><entry><title type="html">Coding Concepts</title><link href="http://localhost:4000/2018/02/07/coding-concepts.html" rel="alternate" type="text/html" title="Coding Concepts" /><published>2018-02-07T20:19:27-06:00</published><updated>2018-02-07T20:19:27-06:00</updated><id>http://localhost:4000/2018/02/07/coding-concepts</id><content type="html" xml:base="http://localhost:4000/2018/02/07/coding-concepts.html">&lt;p&gt;Learning to code with new frameworks or languages can be a weird (even sadistic/masochistic) combination of fun and frustration. The fun comes from learning something new and exciting. It often comes early in the experience, when you start cutting and pasting code samples together and quickly see cool stuff working! The frustration comes from the conceptual walls you’ll hit as soon as you want to do anything meaningful beyond the example code you find.&lt;/p&gt;

&lt;p&gt;To climb the walls, you’ll need to learn the concepts. But a lot of people struggle through this part (or skip it altogether) because it’s not as fun as seeing “cool stuff working!” I get it. I’m the same way. And I want to change that.&lt;/p&gt;

&lt;p&gt;I want to make learning concepts just as fun as seeing new code do cool stuff. I think this can be done by combining written descriptions, expressive images, and live code. The following samples are taken from current explorations towards this goal.&lt;/p&gt;

&lt;h3 id=&quot;explainers&quot;&gt;Explainers&lt;/h3&gt;
&lt;p&gt;Explainers is a concept for an iPhone app focused on explaining coding concepts with a combination of my own descriptions, illustrations, and code samples along with the best quotes from the best authors on the subject.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/ExplainerPrototype.png&quot; alt=&quot;ExplainerPrototype&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;live-code&quot;&gt;Live Code&lt;/h3&gt;
&lt;p&gt;Here’s a live code example from the Explainer concept on JavaScript closures above. With live, editable code, developers can cement the concept into a practical foundation for all the details they will learn later.&lt;/p&gt;

&lt;p data-height=&quot;397&quot; data-theme-id=&quot;23425&quot; data-slug-hash=&quot;RQooyp&quot; data-default-tab=&quot;js,result&quot; data-show-tab-bar=&quot;no&quot; data-user=&quot;bdenham&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Closures&quot; data-editable=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/bdenham/pen/RQooyp/&quot;&gt;Closures&lt;/a&gt; by Bruce Denham (&lt;a href=&quot;https://codepen.io/bdenham&quot;&gt;@bdenham&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><summary type="html">Learning to code with new frameworks or languages can be a weird (even sadistic/masochistic) combination of fun and frustration. The fun comes from learning something new and exciting. It often comes early in the experience, when you start cutting and pasting code samples together and quickly see cool stuff working! The frustration comes from the conceptual walls you’ll hit as soon as you want to do anything meaningful beyond the example code you find.</summary></entry><entry><title type="html">Coding Cookbooks</title><link href="http://localhost:4000/2018/02/05/coding-cookbooks.html" rel="alternate" type="text/html" title="Coding Cookbooks" /><published>2018-02-05T20:39:20-06:00</published><updated>2018-02-05T20:39:20-06:00</updated><id>http://localhost:4000/2018/02/05/coding-cookbooks</id><content type="html" xml:base="http://localhost:4000/2018/02/05/coding-cookbooks.html">&lt;p&gt;In progress…&lt;/p&gt;</content><author><name></name></author><summary type="html">In progress…</summary></entry><entry><title type="html">Documentation Plans</title><link href="http://localhost:4000/2018/02/05/documentation-plans.html" rel="alternate" type="text/html" title="Documentation Plans" /><published>2018-02-05T17:57:34-06:00</published><updated>2018-02-05T17:57:34-06:00</updated><id>http://localhost:4000/2018/02/05/documentation-plans</id><content type="html" xml:base="http://localhost:4000/2018/02/05/documentation-plans.html">&lt;p&gt;In progress…&lt;/p&gt;</content><author><name></name></author><summary type="html">In progress…</summary></entry><entry><title type="html">Document Designs</title><link href="http://localhost:4000/2018/02/05/document-designs.html" rel="alternate" type="text/html" title="Document Designs" /><published>2018-02-05T17:57:29-06:00</published><updated>2018-02-05T17:57:29-06:00</updated><id>http://localhost:4000/2018/02/05/document-designs</id><content type="html" xml:base="http://localhost:4000/2018/02/05/document-designs.html">&lt;p&gt;In progress…&lt;/p&gt;</content><author><name></name></author><summary type="html">In progress…</summary></entry><entry><title type="html">Infographics</title><link href="http://localhost:4000/2018/02/05/infographics.html" rel="alternate" type="text/html" title="Infographics" /><published>2018-02-05T17:57:22-06:00</published><updated>2018-02-05T17:57:22-06:00</updated><id>http://localhost:4000/2018/02/05/infographics</id><content type="html" xml:base="http://localhost:4000/2018/02/05/infographics.html">&lt;p&gt;In progress…&lt;/p&gt;</content><author><name></name></author><summary type="html">In progress…</summary></entry><entry><title type="html">Overviews</title><link href="http://localhost:4000/jekyll/update/2018/02/03/overviews.html" rel="alternate" type="text/html" title="Overviews" /><published>2018-02-03T00:00:00-06:00</published><updated>2018-02-03T00:00:00-06:00</updated><id>http://localhost:4000/jekyll/update/2018/02/03/overviews</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2018/02/03/overviews.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Planning</title><link href="http://localhost:4000/jekyll/update/2018/02/02/planning.html" rel="alternate" type="text/html" title="Planning" /><published>2018-02-02T00:00:00-06:00</published><updated>2018-02-02T00:00:00-06:00</updated><id>http://localhost:4000/jekyll/update/2018/02/02/planning</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2018/02/02/planning.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;archer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;color:#0066cc&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>